# -*- coding: utf-8 -*-
"""yolo_fire_smoke.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VCRa__kG4RYLlHrJl3gW19eRrR8BelTk
"""

## Comparative study of real time fire and smoke detection using different versions of yolo
##yolo versions which we are going to use yolov5,yolov8

# !python --version
!pip install roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("custom-thxhn").project("fire-wrpgm")
version = project.version(8)
dataset = version.download("yolov8")

# Step 2: Define dataset path
dataset_path = dataset.location

import os

# Define separate project directories
v5_dir = "yolov5_project"
v8_dir = "yolov8_project"

# Create both directories if they don't already exist
os.makedirs(v5_dir, exist_ok=True)
os.makedirs(v8_dir, exist_ok=True)

# Just to confirm: print the paths created
print("YOLOv5 project directory:", os.path.abspath(v5_dir))
print("YOLOv8 project directory:", os.path.abspath(v8_dir))

# Check PyTorch and CUDA availability : PyTorch is a deep learning library, and CUDA is a parallel computing platform that enables GPU acceleration for deep learning tasks.
import torch
print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

data_yaml = """
train: /content/fire-8/train/images
val: /content/fire-8/train/images
test: /content/fire-8/train/images
nc: 3
names: ['fire','other','smoke']

"""

with open('/content/fire-8/data.yaml', 'w') as f:
    f.write(data_yaml)

import os
print(os.listdir('/content/fire-8/'))

# Commented out IPython magic to ensure Python compatibility.
# ==================== TRAIN YOLOv5 ====================

### Train YOLOv5
# %cd /content/yolov5_project
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt
!python train.py --img 640 --batch 16 --epochs 50 --data /content/fire-8/data.yaml --weights yolov5s.pt --workers 1 --project /content/yolov5_project/runs --name fire_yolov5

from IPython.display import Image
Image(filename='/content/yolov5_project/runs/fire_yolov5/results.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# ==================== TRAIN YOLOv8 ====================
# Step 3: Install Ultralytics (YOLOv8)
# %cd /content/yolov8_project
!pip install ultralytics -q


# Step 4: Train YOLOv8 (50 epochs to match)
!yolo task=detect mode=train model=yolov8s.pt data=/content/Fire-and-Smoke-Detection-2/data.yaml epochs=50 imgsz=640 batch=16 workers=1 project=/content/yolov8_project/runs name=fire_yolov8

# YOLOv8 Evaluation + Plot
!yolo task=detect mode=val model=/content/yolov8_project/runs/fire_yolov8/weights/best.pt data=/content/Fire-and-Smoke-Detection-2/data.yaml imgsz=640

# Plot results from training
from IPython.display import Image
Image(filename='/content/yolov8_project/runs/fire_yolov8/results.png', width=600)

from IPython.display import Image, display, HTML
display(HTML("<h2 style='color: #E67E22;'>YOLOv5 Confusion Matrix</h2>"))
# Show confusion matrix image
display(Image('/content/yolov5_project/runs/fire_yolov5/confusion_matrix.png'))
display(HTML("<h2 style='color: #1ABC9C;'>YOLOv8 Confusion Matrix</h2>"))
# Show confusion matrix image (default Ultralytics path)
display(Image('/content/yolov8_project/runs/fire_yolov8/confusion_matrix.png'))

##image inference
!python detect.py --weights /content/yolov5_project/runs/fire_yolov5/weights/best.pt --img 640 --conf 0.1 --source /content/fire-8/test/images --project /content/yolov5_project/inference --name results_v5 --save-txt

import os
from IPython.display import Image, display, HTML

# Path where results are saved
result_path = '/content/yolov5_project/inference/results_v53'

# Add a heading
display(HTML("<h2 style='color: #2E86C1;'>YOLOv5 Image Results</h2>"))

# Set how many images you want to show
max_images = 20
count = 0

# Loop and show images
for img_file in sorted(os.listdir(result_path)):
    if img_file.endswith(('.jpg', '.png')):
        display(Image(filename=os.path.join(result_path, img_file)))
        count += 1
        if count >= max_images:
            break

from ultralytics import YOLO
# Load the trained YOLOv8 model
model = YOLO('/content/yolov8_project/runs/fire_yolov8/weights/best.pt')  # adjust the path if different

# Run inference on test images folder
results = model.predict(
    source='/content/fire-8/test/images',  # path to your test images
    conf=0.25,
    save=True,
    save_txt=True,
    project='/content/yolov8_project/inference',
    name='results_v8',
    exist_ok=True
)

##Comparsion between yolo v5 and v8 results



##yolo v11

