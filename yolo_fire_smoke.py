# -*- coding: utf-8 -*-
"""yolo_fire_smoke.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VCRa__kG4RYLlHrJl3gW19eRrR8BelTk
"""

## Comparative study of real time fire and smoke detection using different versions of yolo
##yolo versions which we are going to use yolov5,yolov8 and yolov11

# !python --version
!pip install roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("custom-thxhn").project("fire-wrpgm")
version = project.version(8)
dataset = version.download("yolov8")
##about dataset it contains 979 images
# Train Set : 877
# Valid Set : 47
# Test Set : 55

# Step 2: Define dataset path
dataset_path = dataset.location

ls

import os

# Define separate project directories
v5_dir = "yolov5_project"
v8_dir = "yolov8_project"

# Create both directories if they don't already exist
os.makedirs(v5_dir, exist_ok=True)
os.makedirs(v8_dir, exist_ok=True)

# Just to confirm: print the paths created
print("YOLOv5 project directory:", os.path.abspath(v5_dir))
print("YOLOv8 project directory:", os.path.abspath(v8_dir))

# Check PyTorch and CUDA availability : PyTorch is a deep learning library, and CUDA is a parallel computing platform that enables GPU acceleration for deep learning tasks.
import torch
print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

data_yaml = """
train: /content/fire-8/train/images
val: /content/fire-8/train/images
test: /content/fire-8/train/images
nc: 3
names: ['fire','other','smoke']

"""

with open('/content/fire-8/data.yaml', 'w') as f:
    f.write(data_yaml)

# Commented out IPython magic to ensure Python compatibility.
# ==================== TRAIN YOLOv5 ====================

### Train YOLOv5
# %cd /content/yolov5_project
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt
!python train.py --img 640 --batch 16 --epochs 50 --data
/content/fire-8/data.yaml --weights yolov5s.pt --workers 1
--project /content/yolov5_project/runs --name fire_yolov5

from IPython.display import Image
Image(filename='/content/yolov5_project/runs/fire_yolov5/results.png', width=600)

# from google.colab import drive
# drive.mount('/content/drive')
# !cp -r /content/yolov8_project /content/drive/MyDrive/fire-smoke-models/

!pip install roboflow
from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("custom-thxhn").project("fire-wrpgm")
version = project.version(8)
dataset = version.download("yolov8")
dataset_path = dataset.location

# Commented out IPython magic to ensure Python compatibility.
# ==================== TRAIN YOLOv8 ====================
# Step 3: Install Ultralytics (YOLOv8)

# %cd /content/yolov8_project
!pip install ultralytics -q

# Step 4: Train YOLOv8 (50 epochs to match)
!yolo task=detect mode=train model=yolov8s.pt
data=/content/fire-8/data.yaml epochs=50 imgsz=640
batch=16 workers=1 project=/content/yolov8_project/runs
name=fire_yolov8

# YOLOv8 Evaluation + Plot
!yolo task=detect mode=val model=/content/yolov8_project/runs/fire_yolov8/weights/best.pt data=/content/fire-8/data.yaml imgsz=640

# Plot results from training
from IPython.display import Image
Image(filename='/content/yolov8_project/runs/fire_yolov8/results.png', width=600)

## comparison between yolov5 and v8
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


v5 = pd.read_csv(r'/content/yolov5_project/runs/fire_yolov5/results.csv')
v8 = pd.read_csv(r'/content/yolov8_project/runs/fire_yolov8/results.csv')
print(v5.columns)
print(v8.columns)
v5.columns = v5.columns.str.strip()
v8.columns = v8.columns.str.strip()

epochs = v5['epoch']  # Same for both models

# Function to plot comparisons
def plot_metric(metric_v5, metric_v8, label, ylabel, title):
    plt.figure(figsize=(10, 5))
    plt.plot(epochs, metric_v5, label='YOLOv5', color='blue')
    plt.plot(epochs, metric_v8, label='YOLOv8', color='orange')
    plt.xlabel('Epochs')
    plt.ylabel(ylabel)
    plt.title(title)
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# Plot Evaluation Metrics
plot_metric(v5['metrics/precision'], v8['metrics/precision(B)'], 'Precision', 'Precision', 'Precision (B): YOLOv5 vs YOLOv8')
plot_metric(v5['metrics/recall'], v8['metrics/recall(B)'], 'Recall', 'Recall', 'Recall (B): YOLOv5 vs YOLOv8')
plot_metric(v5['metrics/mAP_0.5'], v8['metrics/mAP50(B)'], 'mAP@50', 'mAP@50', 'mAP@50 (B): YOLOv5 vs YOLOv8')
plot_metric(v5['metrics/mAP_0.5:0.95'], v8['metrics/mAP50-95(B)'], 'mAP@50-95', 'mAP@50-95', 'mAP@50-95 (B): YOLOv5 vs YOLOv8')


# Get last row (final epoch)
last_v5 = v5.iloc[-1]
last_v8 = v8.iloc[-1]

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov5_project/yolov5
!python detect.py --weights
/content/yolov5_project/runs/fire_yolov5/weights/best.pt
--img 640 --conf 0.1 --source /content/fire-8/test/images
--project /content/yolov5_project/inference --name
results_v5 --save-txt

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov8_project
!yolo task=detect mode=predict \
    model=/content/yolov8_project/runs/fire_yolov8/weights/best.pt \
    conf=0.1 \
    source=/content/fire-8/test/images \
    project=/content/yolov8_project/inference \
    name=results_v8 \
    save_txt=True

import os
from IPython.display import Image, display, HTML

# Path where results are saved
result_path = '/content/yolov5_project/inference/results_v54'

# Add a heading
display(HTML("<h2 style='color: #2E86C1;'>YOLOv5 Image Results</h2>"))

# Set how many images you want to show
max_images = 20
count = 0

# Loop and show images
for img_file in sorted(os.listdir(result_path)):
    if img_file.endswith(('.jpg', '.png')):
        display(Image(filename=os.path.join(result_path, img_file)))
        count += 1
        if count >= max_images:
            break

import os
from IPython.display import Image, display, HTML

# Path where results are saved
#result_path = '/content/yolov5_project/inference/results_v54'
result_path = '/content/yolov8_project/inference/results_v8'

# Add a heading
display(HTML("<h2 style='color: #2E86C1;'>YOLOv8 Image Results</h2>"))

# Set how many images you want to show
max_images = 20
count = 0

# Loop and show images
for img_file in sorted(os.listdir(result_path)):
    if img_file.endswith(('.jpg', '.png')):
        display(Image(filename=os.path.join(result_path, img_file)))
        count += 1
        if count >= max_images:
            break

#yolo v11
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("custom-thxhn").project("fire-wrpgm")
version = project.version(8)
dataset = version.download("yolov11")
# Define dataset path
dataset_path = dataset.location

# Commented out IPython magic to ensure Python compatibility.
import os
# %cd /content
# Define separate project directories
v11_dir = "yolov11_project"

# Create both directories if they don't already exist
os.makedirs(v11_dir, exist_ok=True)

# Just to confirm: print the paths created
print("YOLOv11 project directory:", os.path.abspath(v11_dir))

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov11_project/

!ls

!yolo task=detect mode=train model=yolo11s.pt data={dataset.location}/data.yaml epochs=10 imgsz=640 plots=True

from IPython.display import Image
Image(filename='/content//runs/detect/train/results.png', width=600)

# detect
!yolo task=detect mode=predict
model=/content/runs/detect/train/weights/best.pt
conf=0.25 source={dataset.location}/test/images
save=True

import glob
import os
from IPython.display import Image as IPyImage, display

latest_folder = max(glob.glob('/content/runs/detect/predict*/'), key=os.path.getmtime)
for img in glob.glob(f'{latest_folder}/*.jpg')[:5]:
	display(IPyImage(filename=img, width=600))
	print("\n")

# Commented out IPython magic to ensure Python compatibility.
# //yolo v11 with 50 epochs
#%cd /content/yolov11_project
# %pip install ultralytics supervision "ultralytics<=8.3.40"
import ultralytics
!yolo task=detect mode=train model=yolo11s.pt
data={dataset.location}/data.yaml epochs=50
imgsz=640 plots=True

from IPython.display import Image
Image(filename='/content/yolov11_project/runs/detect/train/results.png', width=600)

# from google.colab import drive
# drive.mount('/content/drive')
!cp -r /content/yolov11_project /content/drive/MyDrive/fire-smoke-models/

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load datasets
v5 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov5_project/runs/fire_yolov5/results.csv')
v8 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov8_project/runs/fire_yolov8/results.csv')
v11 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov11_project/runs/detect/train/results.csv')

# Strip any extra spaces in column names
v5.columns = v5.columns.str.strip()
v8.columns = v8.columns.str.strip()
v11.columns = v11.columns.str.strip()

# Check column names for v11 to ensure they match
print(v11.columns)

# Assuming the columns match between models, we proceed
epochs = v5['epoch']  # Same for all models

# Function to plot comparisons
def plot_metric(metric_v5, metric_v8, metric_v11, label, ylabel, title):
    plt.figure(figsize=(10, 5))
    plt.plot(epochs, metric_v5, label='YOLOv5', color='red')
    plt.plot(epochs, metric_v11, label='YOLOv11', color='blue')
    plt.plot(epochs, metric_v8, label='YOLOv8', color='green')

    plt.xlabel('Epochs')
    plt.ylabel(ylabel)
    plt.title(title)
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# Plot Evaluation Metrics
plot_metric(v5['metrics/precision'], v8['metrics/precision(B)'], v11['metrics/precision(B)'], 'Precision', 'Precision', 'Precision (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/recall'], v8['metrics/recall(B)'], v11['metrics/recall(B)'], 'Recall', 'Recall', 'Recall (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/mAP_0.5'], v8['metrics/mAP50(B)'], v11['metrics/mAP50(B)'], 'mAP@50', 'mAP@50', 'mAP@50 (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/mAP_0.5:0.95'], v8['metrics/mAP50-95(B)'], v11['metrics/mAP50-95(B)'], 'mAP@50-95', 'mAP@50-95', 'mAP@50-95 (B): YOLOv5 vs YOLOv8 vs YOLOv11')

# detect
!yolo task=detect mode=predict model=/content/yolov11_project/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

import glob
import os
from IPython.display import Image as IPyImage, display

# Get list of prediction folders
predict_folders = glob.glob('/content/yolov11_project/runs/detect/predict*/')

if predict_folders:
    latest_folder = max(predict_folders, key=os.path.getmtime)
    image_paths = glob.glob(f'{latest_folder}/*.jpg')

    if image_paths:
        for img in image_paths[:5]:
            display(IPyImage(filename=img, width=600))
            print("\n")
    else:
        print(f"No .jpg images found in {latest_folder}")
else:
    print("No prediction folders found at /content/runs/detect/")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/

## now using different dataset with more images
# Train Set : 4804
# Valid Set : 1095
# Test Set : 627

## Changing dataset and trying for 50 epochs

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("veli-t").project("firesmokedetection-5w49j")
version = project.version(4)
dataset = version.download("yolov11")

dataset_path = dataset.location

# Commented out IPython magic to ensure Python compatibility.
import os
# %cd /content
# Define separate project directories
v11_dir = "yolov11_project_dataset_2_50_epochs"

# Create both directories if they don't already exist
os.makedirs(v11_dir, exist_ok=True)

# Just to confirm: print the paths created
print("YOLOv11 project directory:", os.path.abspath(v11_dir))

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov11_project_dataset_2_50_epochs

# Commented out IPython magic to ensure Python compatibility.
# //yolo v11 with 50 epochs

# Install dependencies
# %pip install ultralytics supervision "ultralytics<=8.3.40"

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Define the project directory in your Google Drive
project_path = '/content/drive/MyDrive/fire-smoke-models/yolov11_project_dataset2'

# Run training with YOLOv11 and automatically save to Drive
!yolo task=detect mode=train model=yolo11s.pt data={dataset.location}/data.yaml
epochs=50 imgsz=640 plots=True project={project_path} name=exp

from IPython.display import Image
Image(filename='/content/drive/MyDrive/fire-smoke-models/yolov11_project_dataset2/exp/results.png', width=600)

# detect and show images
!yolo task=detect mode=predict model=/content/drive/MyDrive/fire-smoke-models/yolov11_project_dataset2/exp/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

import glob
import os
from IPython.display import Image as IPyImage, display

# Get list of prediction folders
predict_folders = glob.glob('/content/yolov11_project_dataset_2_50_epochs/runs/detect/predict*/')

if predict_folders:
    latest_folder = max(predict_folders, key=os.path.getmtime)
    image_paths = glob.glob(f'{latest_folder}/*.jpg')

    if image_paths:
        for img in image_paths[:10]:
            display(IPyImage(filename=img, width=600))
            print("\n")
    else:
        print(f"No .jpg images found in {latest_folder}")
else:
    print("No prediction folders found at /content/runs/detect/")

# Commented out IPython magic to ensure Python compatibility.
import os
# %cd /content/
# Define separate project directories
v5_dir = "yolov5_project_dataset2"
v8_dir = "yolov8_project_dataset2"

# Create both directories if they don't already exist
os.makedirs(v5_dir, exist_ok=True)
os.makedirs(v8_dir, exist_ok=True)

# Just to confirm: print the paths created
print("YOLOv5 project directory:", os.path.abspath(v5_dir))
print("YOLOv8 project directory:", os.path.abspath(v8_dir))

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov8_project_dataset2/

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("veli-t").project("firesmokedetection-5w49j")
version = project.version(4)
dataset = version.download("yolov8")
dataset_path = dataset.location

# Step 1: Install ultralytics
!pip install ultralytics -q

# Step 2: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Step 3: Define the project path inside Google Drive
project_path = "/content/drive/MyDrive/fire-smoke-models/yolov8_project_dataset2"

# Step 4: Train YOLOv8 and automatically save results to Drive
!yolo task=detect mode=train model=yolov8s.pt data=/content/yolov8_project_dataset2/FireSmokeDetection-4/data.yaml \
epochs=50 imgsz=640 batch=16 workers=1 project={project_path} name=fire_yolov8

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov5_project_dataset2/

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="VxheCdLuJSmrgU2pwJss")
project = rf.workspace("veli-t").project("firesmokedetection-5w49j")
version = project.version(4)
dataset = version.download("yolov5")
dataset_path = dataset.location



# Commented out IPython magic to ensure Python compatibility.
# Step 0: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')  # This will prompt you to authorize

# Step 1: Go to your working directory
# %cd /content/yolov5_project_dataset2/

# Step 2: Clone YOLOv5 (if not already cloned)
!git clone https://github.com/ultralytics/yolov5.git

# Step 3: Move into the YOLOv5 directory
# %cd yolov5

# Step 4: Install dependencies
!pip install -r requirements.txt

# Step 5: Train YOLOv5 and save results to Drive
!python train.py \
  --img 640 \
  --batch 16 \
  --epochs 120 \
  --data /content/yolov5_project_dataset2/FireSmokeDetection-4/data.yaml \
  --weights yolov5s.pt \
  --workers 1 \
  --project /content/drive/MyDrive/fire-smoke-models/yolov5_project_dataset2 \
  --name fire_yolov5



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load datasets
v5 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov5_project_dataset2/fire_yolov52/results.csv')
v8 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov8_project_dataset2/fire_yolov82/results.csv')
v11 = pd.read_csv(r'/content/drive/MyDrive/fire-smoke-models/yolov11_project_dataset2/exp/results.csv')

# Strip any extra spaces in column names
v5.columns = v5.columns.str.strip()
v8.columns = v8.columns.str.strip()
v11.columns = v11.columns.str.strip()

# Check column names for v11 to ensure they match
print(v11.columns)

# Assuming the columns match between models, we proceed
epochs = v5['epoch']  # Same for all models

# Function to plot comparisons
def plot_metric(metric_v5, metric_v8, metric_v11, label, ylabel, title):
    plt.figure(figsize=(7, 5))
    plt.plot(epochs, metric_v5, label='YOLOv5', color='red')
    plt.plot(epochs, metric_v11, label='YOLOv11', color='blue')
    plt.plot(epochs, metric_v8, label='YOLOv8', color='green')

    plt.xlabel('Epochs')
    plt.ylabel(ylabel)
    plt.title(title)
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Plot Evaluation Metrics
plot_metric(v5['metrics/precision'], v8['metrics/precision(B)'], v11['metrics/precision(B)'], 'Precision', 'Precision', 'Precision (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/recall'], v8['metrics/recall(B)'], v11['metrics/recall(B)'], 'Recall', 'Recall', 'Recall (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/mAP_0.5'], v8['metrics/mAP50(B)'], v11['metrics/mAP50(B)'], 'mAP@50', 'mAP@50', 'mAP@50 (B): YOLOv5 vs YOLOv8 vs YOLOv11')
plot_metric(v5['metrics/mAP_0.5:0.95'], v8['metrics/mAP50-95(B)'], v11['metrics/mAP50-95(B)'], 'mAP@50-95', 'mAP@50-95', 'mAP@50-95 (B): YOLOv5 vs YOLOv8 vs YOLOv11')

def plot_all_losses(df, model_name, color='blue'):
    plt.figure(figsize=(8, 5))
    plt.plot(df['epoch'], df['train/box_loss'], label='Box Loss', color='red')
    plt.plot(df['epoch'], df['train/cls_loss'], label='Objectness Loss', color='green')


    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.title(f'{model_name} Loss Graphs')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# Plot losses for each model separately
plot_all_losses(v5, "YOLOv5")
plot_all_losses(v8, "YOLOv8")
plot_all_losses(v11, "YOLOv11")